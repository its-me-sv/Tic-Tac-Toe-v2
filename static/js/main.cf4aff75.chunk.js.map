{"version":3,"sources":["components/header/header.component.jsx","components/cross/cross.component.jsx","components/circle/circle.component.jsx","redux/menu/menu.types.js","components/menu/menu.component.jsx","redux/menu/menu.actions.js","components/square/square.component.jsx","redux/board/board.types.js","redux/board/board.actions.js","utils.js","components/component-decider/component-decider.component.jsx","components/board/board.component.jsx","components/scoreboard/scoreboard.component.jsx","redux/score/score.types.js","components/reset-button/reset-button.component.jsx","redux/score/score.actions.js","components/result/result.container.jsx","containers/app/app.container.jsx","redux/menu/menu.reducer.js","redux/board/board.reducer.js","redux/score/score.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Header","className","X","clickEvent","width","height","viewBox","onClick","x1","y1","x2","y2","O","cx","cy","r","menuTypes","SET_NO_OF_PLAYERS","SET_PLAYER_1_TOOL","SET_MENU_LEVEL","RESET_MENU","connect","menu","level","menuLevel","player2","dispatch","setNoOfPlayers","val","type","payload","noOfPlayers","changeLevel","setMenuLevel","changePlayerTool","setPlayer1Tool","style","marginTop","cursor","Square","boardTypes","RESET_BOARD","UPDATE_BOARD","SET_CURRENT_PLAYER","resetBoard","calculateResponse","p","COMPUTER","HUMAN","EMPTY","emptyPositionInLineFullOf","player","winningPosition","undefined","defendingPosition","includes","indexOf","sleep","ms","Promise","resolve","setTimeout","ComponentDecider","handleClick","a","props","pos","updateBoard","updatePlayer","playingBoard","currPlayer","player1Tool","tool","nextPlayer","boardCopy","response","computerTool","this","React","Component","board","currentPlayer","map","idx","score","scores","scoreArray","Math","floor","scoreTypes","SET_SCORE","RESET_SCORE","menuReset","boardReset","scoreReset","getIndex","scoreUpdater","winner","message","App","result","player2Tool","lineFullOf","gridIsFull","every","position","detectWinner","INITIAL_STATE","menuReducer","state","action","boardReducer","boardCpy","scoreReducer","rootReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"seASeA,EAJA,kBACX,sBAAMC,UAAU,cAAhB,0BCMWC,G,YAPL,SAAC,GAAD,IAAEC,EAAF,EAAEA,WAAF,OACN,sBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,kBAAkBL,UAAU,QAAQM,QAASJ,EAAnF,UACI,sBAAMK,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,OACnC,sBAAMH,GAAG,MAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,aCG3BC,G,MANL,SAAC,GAAD,IAAET,EAAF,EAAEA,WAAF,OACN,qBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,kBAAkBL,UAAU,SAASM,QAASJ,EAApF,SACI,wBAAQU,GAAG,IAAIC,GAAG,IAAIC,EAAE,WCAjBC,EAPG,CACdC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,eAAgB,iBAChBC,WAAY,cCmEDC,eAXS,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,MAAa,CACjCC,MAAOD,EAAKE,UACZC,QAASH,EAAKG,YAGQ,SAAAC,GAAQ,MAAK,CACnCC,eAAgB,SAAAC,GAAG,OAAIF,EChEA,SAAAE,GAAG,MAAK,CAC/BC,KAAMb,EAAUC,kBAChBa,QAASF,GD8DuBG,CAAYH,KAC5CI,YAAa,SAAAJ,GAAG,OAAIF,EC5DI,SAAAE,GAAG,MAAK,CAChCC,KAAMb,EAAUG,eAChBW,QAASF,GD0DoBK,CAAaL,KAC1CM,iBAAkB,SAAAN,GAAG,OAAIF,ECxDC,SAAAE,GAAG,MAAK,CAClCC,KAAMb,EAAUE,kBAChBY,QAASF,GDsDyBO,CAAeP,QAGtCP,EAtDF,SAAC,GAMP,IALHE,EAKE,EALFA,MACAI,EAIE,EAJFA,eACAK,EAGE,EAHFA,YACAE,EAEE,EAFFA,iBACAT,EACE,EADFA,QAEA,OACc,IAAVF,EACI,sBAAKtB,UAAU,iBAAf,UACI,sBAAMA,UAAU,aAAhB,+BACA,sBAAKA,UAAU,WAAf,UACI,sBAAMM,QAAS,kBAAMoB,EAAe,IAApC,eACA,sBAAMpB,QAAS,kBAAMoB,EAAe,IAApC,qBAGR,sBAAK1B,UAAU,iBAAf,UACI,sBAAMA,UAAU,aAAhB,SAEoB,aAAZwB,EACE,WACA,mBAGV,sBAAKxB,UAAU,WAAWmC,MAAO,CAACC,UAAW,QAA7C,UACI,sBAAM9B,QAAS,kBAAM2B,EAAiB,UAAtC,SACI,cAAC,EAAD,MAEJ,sBAAM3B,QAAS,kBAAM2B,EAAiB,WAAtC,SACI,cAAC,EAAD,SAGR,sBACIjC,UAAU,aACVmC,MAAO,CAACC,UAAW,OAAQC,OAAQ,WACnC/B,QAAS,kBAAMyB,EAAY,IAH/B,+B,iCEvCDO,G,YALA,SAAC,GAAD,IAAEpC,EAAF,EAAEA,WAAF,OACX,qBAAKF,UAAU,SAASM,QAASJ,MCAtBqC,EANI,CACfC,YAAa,cACbC,aAAc,eACdC,mBAAoB,sBCDXC,EAAa,iBAAO,CAC7Bf,KAAMW,EAAWC,cCHd,SAASI,EAAkBC,EAAGC,EAAUC,GAAmB,IAAZC,EAAW,uDAAH,EAI1D,SAASC,EAA0BC,GAC/B,OAAIL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAGNL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAGNL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,EAENL,EAAE,KAAOG,IACRH,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC5BL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GACvB,OAJV,EAQJ,IAAMC,EAAkBF,EAA0BH,GAClD,QAAwBM,IAApBD,EACA,OAAOA,EAGX,IAAME,EAAoBJ,EAA0BF,GACpD,YAA0BK,IAAtBC,EACOA,EAGNR,EAAES,SAASN,GAETH,EAAEU,QAAQP,IADL,EAST,SAASQ,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAACC,GAChBC,WAAWD,EAASF,M,IC3DtBI,E,4MACFC,Y,sBAAc,oDAAAC,EAAA,2DASN,EAAKC,MAPLC,EAFM,EAENA,IACAC,EAHM,EAGNA,YACAC,EAJM,EAINA,aACAC,EALM,EAKNA,aACAC,EANM,EAMNA,WACAC,EAPM,EAONA,YACA9C,EARM,EAQNA,QAEsB,IAAtB4C,EAAaH,GAVP,oDAiBVC,EAAYD,EAHRM,EADe,aAAfF,EACOC,EAEgB,WAAhBA,EAA2B,QAAU,UAGhDH,EADIK,EAA4B,aAAfH,EAA4B7C,EAAU,YAEpC,aAAfgD,EApBM,qBAqBFC,EArBE,YAqBaL,IACTH,GAAOM,GAOC,KALdG,EAAW9B,EACX6B,EAFAE,EAA+B,WAAhBL,EAA2B,QAAU,SAIpDA,IA3BE,oEA+BAd,EAAM,KA/BN,QAgCNU,EAAYQ,EAAUC,GACtBR,EAAa,YAjCP,4C,4CAqCd,WAEI,OADcS,KAAKZ,MAAZrC,KAEH,IAAK,SACD,OAAO,cAAC,EAAD,CAAQzB,WAAY0E,KAAKd,cACpC,IAAK,QACD,OAAO,cAAC,EAAD,CAAO5D,WAAY0E,KAAKd,cACnC,QACI,OAAO,cAAC,EAAD,CAAQ5D,WAAY0E,KAAKd,mB,GA9CjBe,IAAMC,WA+DtB1D,eAZS,SAAC,GAAD,IAAE2D,EAAF,EAAEA,MAAO1D,EAAT,EAASA,KAAT,MAAoB,CACxCgD,WAAYU,EAAMC,cAClBZ,aAAcW,EAAMA,MACpBT,YAAajD,EAAKiD,YAClB9C,QAASH,EAAKG,YAGS,SAAAC,GAAQ,MAAK,CACpCyC,YAAa,SAACD,EAAKtC,GAAN,OAAcF,EF5EJ,SAACwC,EAAKtC,GAAN,MAAe,CACtCC,KAAMW,EAAWE,aACjBZ,QAAS,CAACoC,MAAKtC,QE0EqBuC,CAAYD,EAAKtC,KACrDwC,aAAc,SAAAxC,GAAG,OAAIF,EFxEG,SAAAE,GAAG,MAAK,CAChCC,KAAMW,EAAWG,mBACjBb,QAASF,GEsEqBwC,CAAaxC,QAGhCP,CAGbyC,GC3DazC,eAJS,SAAC,GAAD,MAAc,CAClCgD,aADoB,EAAEW,MACFA,SAGT3D,EArBD,SAAC,GAAoB,IAAnBgD,EAAkB,EAAlBA,aACZ,OACI,qBAAKpE,UAAU,kBAAf,SAEQoE,EAAaa,KACT,SAACtD,EAAKuD,GAAN,OACI,cAAC,EAAD,CAEIvD,IAAKA,EACLsC,IAAKiB,GAFAA,WCUlB9D,G,MAAAA,aALS,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAM8D,EAAR,EAAQA,MAAR,MAAoB,CACxC3D,QAASH,EAAKG,QACd4D,OAAQD,EAAME,cAGHjE,EApBI,SAAC,GAAuB,IAAtBI,EAAqB,EAArBA,QAAS4D,EAAY,EAAZA,OAC1B,OACI,sBAAKpF,UAAU,uBAAf,UACI,uBAAMA,UAAU,OAAhB,oBAA+BsF,KAAKC,MAAMH,EAAO,GAAG,MACpD,uBAAMpF,UAAU,OAAhB,UACiB,aAAZwB,EAAyB,MAAQ,WADtC,KACoD8D,KAAKC,MAAMH,EAAO,GAAG,MAEzE,uBAAMpF,UAAU,OAAhB,UACKwB,EADL,KACgB8D,KAAKC,MAAMH,EAAO,GAAG,MAErC,uBAAMpF,UAAU,OAAhB,kBAA6BsF,KAAKC,MAAMH,EAAO,GAAG,aCX/CI,G,MALI,CACfC,UAAW,YACXC,YAAa,gBC4BFtE,cACX,MAPuB,SAAAK,GAAQ,MAAK,CACpCkE,UAAW,kBAAMlE,ETRW,CAC5BG,KAAMb,EAAUI,cSQhByE,WAAY,kBAAMnE,EAASkB,MAC3BkD,WAAY,kBAAMpE,ECpBW,CAC7BG,KAAM4D,EAAWE,kBDsBNtE,EAnBK,SAAC,GAAD,IAAEuE,EAAF,EAAEA,UAAWC,EAAb,EAAaA,WAAYC,EAAzB,EAAyBA,WAAzB,OAChB,qBACI7F,UAAU,eACVM,QACI,WACIqF,IACAC,IACAC,KANZ,sBEFEC,G,MAAW,CACb,WAAY,EACZ,IAAO,EACP,SAAY,EACZ,WAAY,EACZ,IAAO,IAqBI1E,cACX,MANuB,SAAAK,GAAQ,MAAK,CACpCmE,WAAY,kBAAMnE,EAASkB,MAC3BoD,aAAc,SAAAb,GAAG,OAAIzD,ED/BU,CAC/BG,KAAM4D,EAAWC,UACjB5D,QC6B0CqD,QAG/B9D,EAlBA,SAAC,GAAwC,IAAvC4E,EAAsC,EAAtCA,OAAQJ,EAA8B,EAA9BA,WAAYG,EAAkB,EAAlBA,aAC7BE,EAAO,UAAMD,EAAN,iBAIX,MAHe,QAAXA,IACAC,EAAU,aACdF,EAAaD,EAASE,GAAU,GAE5B,sBAAKhG,UAAU,mBAAf,UACKiG,EACD,wBAAQ3F,QAASsF,EAAY5F,UAAU,YAAvC,yBCTNkG,E,4JACF,WACI,MAAqCtB,KAAKZ,MAAnC1C,EAAP,EAAOA,MAAO+C,EAAd,EAAcA,WAAY7C,EAA1B,EAA0BA,QAC1B,EAAsCoD,KAAKZ,MAAnCI,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,YAClB6B,EAAS,KACb,GAAoB,OAAhB7B,EAAsB,CACtB,IAAM8B,EAA8B,WAAhB9B,EAA2B,QAAU,SAEzD,OADA6B,ER8DL,SAAsBtD,EAAGE,EAAOD,GAAsB,IAAZE,EAAW,uDAAH,EACrD,SAASqD,EAAWnD,GAChB,OAAIL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAE/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAE/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAC/CL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,GAAUL,EAAE,KAAOK,QAAnD,EAGJ,SAASoD,IACL,OAAOzD,EAAE0D,OAAM,SAAAC,GAAQ,OAAIA,IAAaxD,KAI5C,YAAkBI,IADAiD,EAAWtD,GAElBA,OAGSK,IADAiD,EAAWvD,GAEpBA,EAECwD,IAED,MACJ,KQ3FUG,CAAa,YAAIrC,GAAeE,EAAa8B,IAElD,KAAK9B,EACD6B,EAAqB,aAAZ3E,EAAyB,MAAQ,WAC1C,MACJ,KAAK4E,EACDD,EAAS3E,EACT,MACJ,IAAK,MACD2E,EAAS,OAMrB,OACI,sBAAKnG,UAAU,gBAAf,UACgB,OAAXmG,GAAmB,cAAC,EAAD,CAAQH,OAAQG,IACpC,cAAC,EAAD,IAEI7E,EAAQ,EACN,cAAC,EAAD,IACA,iCACE,cAAC,EAAD,IACA,sBAAMtB,UAAU,iBAAhB,SAEuB,aAAfqE,GAAyC,aAAZ7C,EAC3B,YADF,UAEK6C,EAFL,aAKR,cAAC,EAAD,IACA,cAAC,EAAD,c,GAvCNQ,IAAMC,WAuDT1D,eARS,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAM0D,EAAR,EAAQA,MAAR,MAAoB,CACxCzD,MAAOD,EAAKE,UACZ8C,WAAYU,EAAMC,cAClBxD,QAASH,EAAKG,QACd8C,YAAajD,EAAKiD,YAClBF,aAAcW,EAAMA,SAGT3D,CAAyB8E,G,8BCtElCQ,EAAgB,CAClBlF,QAAS,KACT8C,YAAa,KACb/C,UAAW,GAgCAoF,EA7BK,WAAoC,IAAnCC,EAAkC,uDAA1BF,EAAeG,EAAW,uCACnD,OAAQA,EAAOjF,MACX,KAAKb,EAAUC,kBACX,OAA0B,IAAnB6F,EAAOhF,QAAP,2BACG+E,GADH,IACUpF,QAAS,WAAYD,UAAW,IAD1C,2BAEGqF,GAFH,IAEUpF,QAAS,WAAYD,UAAW,IACrD,KAAKR,EAAUE,kBACX,OAAO,2BACA2F,GADP,IAEItC,YAAauC,EAAOhF,QACpBN,UAAW,IAEnB,KAAKR,EAAUG,eACX,OAAO,2BACA0F,GADP,IAEIrF,UAAWsF,EAAOhF,UAE1B,KAAKd,EAAUI,WACX,MAAO,CACHW,YAAa,KACbN,QAAS,KACT8C,YAAa,KACb/C,UAAW,GAEnB,QACI,OAAOqF,IC/BbF,EAAgB,CAClB3B,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCC,cAAe,YA6BJ8B,EA1BM,WAAoC,IAAnCF,EAAkC,uDAA1BF,EAAeG,EAAW,uCACpD,OAAQA,EAAOjF,MACX,KAAKW,EAAWC,YACZ,MAAO,CACHuC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCC,cAAe,YAEvB,KAAKzC,EAAWE,aACZ,IAAIsE,EAAQ,YAAOH,EAAM7B,OACzB,EAAmB8B,EAAOhF,QAAnBoC,EAAP,EAAOA,IAAKtC,EAAZ,EAAYA,IAEZ,OADAoF,EAAS9C,GAAOtC,EACT,2BACAiF,GADP,IAEI7B,MAAM,YAAKgC,KAGnB,KAAKxE,EAAWG,mBACZ,OAAO,2BACAkE,GADP,IAEI5B,cAAe6B,EAAOhF,UAE9B,QACI,OAAO+E,IC3BbF,EAAgB,CAClBrB,WAAY,CAAC,EAAG,EAAG,EAAG,IAwBX2B,EArBM,WAAmC,IAAlCJ,EAAiC,uDAA1BF,EAAeG,EAAW,uCACnD,OAAQA,EAAOjF,MACX,KAAK4D,EAAWC,UACZ,IAAIL,EAAM,YAAOwB,EAAMvB,YAGvB,OAFAD,EAAO,IAAM,EACbA,EAAOyB,EAAOhF,UAAY,EACnB,2BACA+E,GADP,IAEIvB,WAAW,YAAKD,KAGxB,KAAKI,EAAWE,YACZ,OAAO,2BACAkB,GADP,IAEIvB,WAAY,CAAC,EAAG,EAAG,EAAG,KAE9B,QACI,OAAOuB,ICVJK,EANKC,YAAgB,CAChC7F,KAAMsF,EACN5B,MAAO+B,EACP3B,MAAO6B,ICDLG,EAAc,CAACC,KAKrB,IAEeC,EAFDC,YAAYL,EAAaM,IAAe,WAAf,EAAmBJ,ICD1DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.cf4aff75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Stlyes\r\nimport './header.styles.css';\r\n\r\nconst Header = () => (\r\n    <span className=\"header-text\">Tic Tac Toe</span>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// Styles\r\nimport './cross.styles.css';\r\n\r\nconst X = ({clickEvent}) => (\r\n    <svg width=\"100\" height=\"100\" viewBox=\"-50 -50 100 100\" className=\"cross\" onClick={clickEvent}>\r\n        <line x1=\"-40\" y1=\"-40\" x2=\"40\" y2=\"40\" />\r\n        <line x1=\"-40\" y1=\"40\" x2=\"40\" y2=\"-40\" />\r\n    </svg>\r\n);\r\n\r\nexport default X;","import React from 'react';\r\n\r\n// Styles\r\nimport './circle.styles.css'\r\n\r\nconst O = ({clickEvent}) => (\r\n    <svg width=\"100\" height=\"100\" viewBox=\"-50 -50 100 100\" className=\"circle\" onClick={clickEvent}>\r\n        <circle cx=\"0\" cy=\"0\" r=\"40\" />\r\n    </svg>\r\n);\r\n\r\nexport default O;","const menuTypes = {\r\n    SET_NO_OF_PLAYERS: \"SET_NO_OF_PLAYERS\",\r\n    SET_PLAYER_1_TOOL: \"SET_PLAYER_1_TOOL\",\r\n    SET_MENU_LEVEL: \"SET_MENU_LEVEL\",\r\n    RESET_MENU: \"RESET_MENU\"\r\n};\r\n\r\nexport default menuTypes;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// Styles\r\nimport './menu.styles.css';\r\n\r\n// Components\r\nimport Cross from '../cross/cross.component';\r\nimport Circle from '../circle/circle.component';\r\n\r\n// Actions\r\nimport {\r\n    noOfPlayers,\r\n    setMenuLevel,\r\n    setPlayer1Tool\r\n} from '../../redux/menu/menu.actions';\r\n\r\nconst Menu = ({\r\n    level, \r\n    setNoOfPlayers, \r\n    changeLevel, \r\n    changePlayerTool,\r\n    player2\r\n}) => {\r\n    return (\r\n        level === 0 \r\n        ?   <div className=\"menu-container\">\r\n                <span className=\"title-text\">Number of Players</span>\r\n                <div className=\"sub-menu\">\r\n                    <span onClick={() => setNoOfPlayers(1)}>1</span>\r\n                    <span onClick={() => setNoOfPlayers(2)}>2</span>\r\n                </div>\r\n            </div>\r\n        :   <div className=\"menu-container\">\r\n                <span className=\"title-text\">\r\n                    {\r\n                        player2 === \"Computer\"\r\n                        ? \"You take\"\r\n                        : \"Player 1 takes\"\r\n                    }\r\n                </span>\r\n                <div className=\"sub-menu\" style={{marginTop: \"2rem\"}}>\r\n                    <span onClick={() => changePlayerTool(\"cross\")}>\r\n                        <Cross/>\r\n                    </span>\r\n                    <span onClick={() => changePlayerTool(\"circle\")}>\r\n                        <Circle />\r\n                    </span>\r\n                </div>\r\n                <span \r\n                    className=\"title-text\" \r\n                    style={{marginTop: \"1rem\", cursor: \"pointer\"}}\r\n                    onClick={() => changeLevel(0)}\r\n                >\r\n                    &#8592; Back\r\n                </span>\r\n            </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({menu}) => ({\r\n    level: menu.menuLevel,\r\n    player2: menu.player2\r\n});\r\n\r\nconst mapDispachToProps = dispatch => ({\r\n    setNoOfPlayers: val => dispatch(noOfPlayers(val)),\r\n    changeLevel: val => dispatch(setMenuLevel(val)),\r\n    changePlayerTool: val => dispatch(setPlayer1Tool(val))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispachToProps\r\n)(Menu);","import menuTypes from \"./menu.types\";\r\n\r\nexport const noOfPlayers = val => ({\r\n    type: menuTypes.SET_NO_OF_PLAYERS,\r\n    payload: val\r\n});\r\n\r\nexport const setMenuLevel = val => ({\r\n    type: menuTypes.SET_MENU_LEVEL,\r\n    payload: val\r\n});\r\n\r\nexport const setPlayer1Tool = val => ({\r\n    type: menuTypes.SET_PLAYER_1_TOOL,\r\n    payload: val\r\n});\r\n\r\nexport const resetMenu = () => ({\r\n    type: menuTypes.RESET_MENU\r\n});","import React from 'react';\r\n\r\n// Styles\r\nimport './square.styles.css';\r\n\r\nconst Square = ({clickEvent}) => (\r\n    <div className=\"square\" onClick={clickEvent}>\r\n    </div>\r\n);\r\n\r\nexport default Square;","const boardTypes = {\r\n    RESET_BOARD: 'RESET_BOARD',\r\n    UPDATE_BOARD: 'UPDATE_BOARD',\r\n    SET_CURRENT_PLAYER: 'SET_CURRENT_PLAYER'\r\n};\r\n\r\nexport default boardTypes;","import boardTypes from \"./board.types\";\r\n\r\nexport const resetBoard = () => ({\r\n    type: boardTypes.RESET_BOARD\r\n});\r\n\r\nexport const updateBoard = (pos, val) => ({\r\n    type: boardTypes.UPDATE_BOARD,\r\n    payload: {pos, val}\r\n});\r\n\r\nexport const updatePlayer = val => ({\r\n    type: boardTypes.SET_CURRENT_PLAYER,\r\n    payload: val\r\n});","export function calculateResponse(p, COMPUTER, HUMAN, EMPTY = 0) {\r\n\r\n    // This function gives back the first empty position (if any) that is in a line\r\n    // that is otherwise full of circles / crosses (depending on the parameter)\r\n    function emptyPositionInLineFullOf(player) {\r\n        if (p[0] === EMPTY && (                   // If the first position is empty,\r\n            (p[1] === player && p[2] === player) ||   // but otherwise the first row is full\r\n            (p[3] === player && p[6] === player) ||   // or the first column is full\r\n            (p[4] === player && p[8] === player)      // or the diagonal line starting from first position is full\r\n        )) return 0;                            // then return the first position\r\n        // because it's a good position to defend / attack\r\n\r\n        if (p[1] === EMPTY && (                   // If the second position is empty\r\n            (p[0] === player && p[2] === player) ||   // but otherwise the first row is full\r\n            (p[4] === player && p[7] === player)      // or the second column is full\r\n        )) return 1;                            // then return the second position\r\n        // because it's a good position to defend / attack\r\n\r\n        if (p[2] === EMPTY && (\r\n            (p[0] === player && p[1] === player) ||\r\n            (p[5] === player && p[8] === player) ||\r\n            (p[4] === player && p[6] === player)\r\n        )) return 2;\r\n\r\n        if (p[3] === EMPTY && (\r\n            (p[4] === player && p[5] === player) ||\r\n            (p[0] === player && p[6] === player)\r\n        )) return 3;\r\n\r\n        if (p[4] === EMPTY && (\r\n            (p[3] === player && p[5] === player) ||\r\n            (p[1] === player && p[7] === player) ||\r\n            (p[0] === player && p[8] === player) ||\r\n            (p[2] === player && p[6] === player)\r\n        )) return 4;\r\n\r\n        if (p[5] === EMPTY && (\r\n            (p[3] === player && p[4] === player) ||\r\n            (p[2] === player && p[8] === player)\r\n        )) return 5;\r\n\r\n        if (p[6] === EMPTY && (\r\n            (p[7] === player && p[8] === player) ||\r\n            (p[0] === player && p[3] === player) ||\r\n            (p[4] === player && p[2] === player)\r\n        )) return 6;\r\n\r\n        if (p[7] === EMPTY && (\r\n            (p[6] === player && p[8] === player) ||\r\n            (p[1] === player && p[4] === player)\r\n        )) return 7;\r\n\r\n        if (p[8] === EMPTY && (\r\n            (p[6] === player && p[7] === player) ||\r\n            (p[2] === player && p[5] === player) ||\r\n            (p[4] === player && p[0] === player)\r\n        )) return 8;\r\n    }\r\n\r\n    // If there's a position the computer can take and win then take it\r\n    const winningPosition = emptyPositionInLineFullOf(COMPUTER);\r\n    if (winningPosition !== undefined)\r\n        return winningPosition;\r\n\r\n    // Otherwise if there's a position the human can take in next turn to win, then take it\r\n    const defendingPosition = emptyPositionInLineFullOf(HUMAN);\r\n    if (defendingPosition !== undefined)\r\n        return defendingPosition;\r\n\r\n    // Otherwise pick random position that's empty\r\n    if (!p.includes(EMPTY))\r\n        return -1;\r\n    return p.indexOf(EMPTY);\r\n    // while (true) {\r\n    //     const randomPosition = Math.floor(Math.random() * 9)\r\n    //     if (p[randomPosition] === EMPTY)\r\n    //         return randomPosition;\r\n    // }\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n\r\nexport function detectWinner(p, HUMAN, COMPUTER, EMPTY = 0) {\r\n    function lineFullOf(player) {\r\n        if (p[0] === player && p[1] === player && p[2] === player) return true; // First line is full\r\n        if (p[3] === player && p[4] === player && p[5] === player) return true; // Second line is full\r\n        if (p[6] === player && p[7] === player && p[8] === player) return true;\r\n\r\n        if (p[0] === player && p[3] === player && p[6] === player) return true; // First column is full\r\n        if (p[1] === player && p[4] === player && p[7] === player) return true;\r\n        if (p[2] === player && p[5] === player && p[8] === player) return true;\r\n\r\n        if (p[0] === player && p[4] === player && p[8] === player) return true;\r\n        if (p[2] === player && p[4] === player && p[6] === player) return true;\r\n    }\r\n\r\n    function gridIsFull() {\r\n        return p.every(position => position !== EMPTY);\r\n    }\r\n\r\n    const playerWon = lineFullOf(HUMAN);\r\n    if (playerWon !== undefined)\r\n        return HUMAN;\r\n\r\n    const computerWon = lineFullOf(COMPUTER);\r\n    if (computerWon !== undefined)\r\n        return COMPUTER;\r\n\r\n    const tie = gridIsFull();\r\n    if (tie)\r\n        return \"tie\";\r\n    return null;\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// Styles\r\nimport \"./component-decider.styles.css\";\r\n\r\n// Components\r\nimport Square from \"../square/square.component\";\r\nimport Circle from \"../circle/circle.component\";\r\nimport Cross from \"../cross/cross.component\";\r\n\r\n// Actions\r\nimport {\r\n    updateBoard,\r\n    updatePlayer\r\n} from \"../../redux/board/board.actions\";\r\n\r\n// Functions\r\nimport {\r\n    calculateResponse,\r\n    sleep\r\n} from \"../../utils\";\r\n\r\nclass ComponentDecider extends React.Component {\r\n    handleClick = async () => {\r\n        const {\r\n            pos,\r\n            updateBoard,\r\n            updatePlayer,\r\n            playingBoard,\r\n            currPlayer,\r\n            player1Tool,\r\n            player2\r\n        } = this.props;\r\n        if (playingBoard[pos] !== 0)\r\n            return;\r\n        let tool;\r\n        if (currPlayer === \"Player 1\")\r\n            tool = player1Tool;\r\n        else\r\n            tool = player1Tool === \"circle\" ? \"cross\" : \"circle\";\r\n        updateBoard(pos, tool);\r\n        let nextPlayer = currPlayer === \"Player 1\" ? player2 : \"Player 1\";\r\n        updatePlayer(nextPlayer);\r\n        if (nextPlayer === \"Computer\") {\r\n            let boardCopy =[...playingBoard];\r\n            boardCopy[pos] = tool;\r\n            let computerTool = player1Tool === \"circle\" ? \"cross\" : \"circle\";\r\n            let response = calculateResponse(\r\n                boardCopy, \r\n                computerTool,\r\n                player1Tool\r\n            );\r\n            if (response === -1)\r\n                return;\r\n            await sleep(500);\r\n            updateBoard(response, computerTool);\r\n            updatePlayer(\"Player 1\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {val} = this.props;\r\n        switch (val) {\r\n            case \"circle\":\r\n                return <Circle clickEvent={this.handleClick}/>\r\n            case \"cross\":\r\n                return <Cross clickEvent={this.handleClick}/>\r\n            default:\r\n                return <Square clickEvent={this.handleClick}/>\r\n        }\r\n    }\r\n};\r\n\r\nconst mapStateToProps = ({board, menu}) => ({\r\n    currPlayer: board.currentPlayer,\r\n    playingBoard: board.board,\r\n    player1Tool: menu.player1Tool,\r\n    player2: menu.player2\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateBoard: (pos, val) => dispatch(updateBoard(pos, val)),\r\n    updatePlayer: val => dispatch(updatePlayer(val))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ComponentDecider);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n// Styles\r\nimport './board.styles.css';\r\n\r\n// Componets\r\nimport ComponentDecider from '../component-decider/component-decider.component';\r\n\r\nconst Board = ({playingBoard}) => {\r\n    return (\r\n        <div className=\"board-container\">\r\n            {\r\n                playingBoard.map(\r\n                    (val, idx) => \r\n                        <ComponentDecider\r\n                            key={idx}\r\n                            val={val}\r\n                            pos={idx}\r\n                        />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({board}) => ({\r\n    playingBoard: board.board\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Board);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n// Styles\r\nimport './scoreboard.styles.css';\r\n\r\nconst ScoreBoard = ({player2, scores}) => {\r\n    return (\r\n        <div className=\"scoreboard-container\">\r\n            <span className=\"text\">Games: {Math.floor(scores[0]/2)}</span>\r\n            <span className=\"text\">\r\n                {player2 === \"Computer\" ? \"You\" : \"Player 1\"}: {Math.floor(scores[1]/2)}\r\n            </span>\r\n            <span className=\"text\">\r\n                {player2}: {Math.floor(scores[2]/2)}\r\n            </span>\r\n            <span className=\"text\">Tie: {Math.floor(scores[3]/2)}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({menu, score}) => ({\r\n    player2: menu.player2,\r\n    scores: score.scoreArray\r\n});\r\n\r\nexport default connect(mapStateToProps)(ScoreBoard);","const scoreTypes = {\r\n    SET_SCORE: \"SET_SCORE\",\r\n    RESET_SCORE: \"RESET_SCORE\"\r\n};\r\n\r\nexport default scoreTypes;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n// Styles\r\nimport './reset-button.styles.css';\r\n\r\n// Actions\r\nimport {resetMenu} from \"../../redux/menu/menu.actions\";\r\nimport {resetBoard} from '../../redux/board/board.actions';\r\nimport {resetScore} from \"../../redux/score/score.actions\";\r\n\r\nconst ResetButton = ({menuReset, boardReset, scoreReset}) => (\r\n    <div \r\n        className=\"reset-button\"\r\n        onClick={\r\n            () => {\r\n                menuReset();\r\n                boardReset();\r\n                scoreReset();\r\n            }\r\n        }\r\n    >Reset</div>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    menuReset: () => dispatch(resetMenu()),\r\n    boardReset: () => dispatch(resetBoard()),\r\n    scoreReset: () => dispatch(resetScore())\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(ResetButton);","import scoreTypes from \"./score.types\";\r\n\r\nexport const updateScore = val => ({\r\n    type: scoreTypes.SET_SCORE,\r\n    payload: val\r\n});\r\n\r\nexport const resetScore = () => ({\r\n    type: scoreTypes.RESET_SCORE\r\n});","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// Styles\r\nimport \"./result.styles.css\";\r\n\r\n// Action\r\nimport {resetBoard} from \"../../redux/board/board.actions\";\r\nimport {updateScore} from \"../../redux/score/score.actions\";\r\n\r\nconst getIndex = {\r\n    \"Player 1\": 0,\r\n    \"You\": 0,\r\n    \"Computer\": 1,\r\n    \"Player 2\": 1,\r\n    \"tie\": 2\r\n};\r\n\r\nconst Result = ({winner, boardReset, scoreUpdater}) => {\r\n    let message = `${winner} won the game`;\r\n    if (winner === \"tie\")\r\n        message = \"Game tied\";\r\n    scoreUpdater(getIndex[winner] + 1);\r\n    return (\r\n        <div className=\"result-container\">\r\n            {message}\r\n            <button onClick={boardReset} className=\"close-btn\">Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    boardReset: () => dispatch(resetBoard()),\r\n    scoreUpdater: idx => dispatch(updateScore(idx))\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(Result);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n// Styles\r\nimport './app.styles.css';\r\n\r\n// Components\r\nimport Header from '../../components/header/header.component';\r\nimport Menu from '../../components/menu/menu.component';\r\nimport Board from '../../components/board/board.component';\r\nimport ScoreBoard from '../../components/scoreboard/scoreboard.component';\r\nimport ResetButton from '../../components/reset-button/reset-button.component';\r\nimport Result from '../../components/result/result.container';\r\n\r\n// Functions\r\nimport {detectWinner} from \"../../utils\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        const {level, currPlayer, player2} = this.props;\r\n        const { playingBoard, player1Tool } = this.props;\r\n        let result = null;\r\n        if (player1Tool !== null) {\r\n            const player2Tool = player1Tool === \"circle\" ? \"cross\" : \"circle\";\r\n            result = detectWinner([...playingBoard], player1Tool, player2Tool);\r\n            switch (result) {\r\n                case player1Tool:\r\n                    result = player2 === \"Computer\" ? \"You\" : \"Player 1\";\r\n                    break;\r\n                case player2Tool:\r\n                    result = player2;\r\n                    break;\r\n                case \"tie\":\r\n                    result = \"tie\";\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"app-container\">\r\n                {result !== null && <Result winner={result}/>}\r\n                <Header />\r\n                {\r\n                    level < 2\r\n                    ? <Menu />\r\n                    : <span>\r\n                        <ScoreBoard />\r\n                        <span className=\"current-player\">\r\n                            {\r\n                                currPlayer === \"Player 1\" && player2 === \"Computer\"\r\n                                ? \"Your turn\"\r\n                                : `${currPlayer}'s turn`\r\n                            }\r\n                        </span>\r\n                        <Board />\r\n                        <ResetButton />\r\n                      </span>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({menu, board}) => ({\r\n    level: menu.menuLevel,\r\n    currPlayer: board.currentPlayer,\r\n    player2: menu.player2,\r\n    player1Tool: menu.player1Tool,\r\n    playingBoard: board.board\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);","import menuTypes from \"./menu.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    player2: null,\r\n    player1Tool: null,\r\n    menuLevel: 0\r\n};\r\n\r\nconst menuReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case menuTypes.SET_NO_OF_PLAYERS:\r\n            return action.payload === 1 \r\n                ? {...state, player2: \"Computer\", menuLevel: 1}\r\n                : {...state, player2: \"Player 2\", menuLevel: 1};\r\n        case menuTypes.SET_PLAYER_1_TOOL:\r\n            return {\r\n                ...state,\r\n                player1Tool: action.payload,\r\n                menuLevel: 2\r\n            };\r\n        case menuTypes.SET_MENU_LEVEL:\r\n            return {\r\n                ...state,\r\n                menuLevel: action.payload\r\n            };\r\n        case menuTypes.RESET_MENU:\r\n            return {\r\n                noOfPlayers: null,\r\n                player2: null,\r\n                player1Tool: null,\r\n                menuLevel: 0\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default menuReducer;","import boardTypes from \"./board.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    board: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    currentPlayer: \"Player 1\"\r\n};\r\n\r\nconst boardReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case boardTypes.RESET_BOARD:\r\n            return {\r\n                board: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                currentPlayer: \"Player 1\"\r\n            };\r\n        case boardTypes.UPDATE_BOARD: {\r\n            let boardCpy = [...state.board];\r\n            const {pos, val} = action.payload;\r\n            boardCpy[pos] = val;\r\n            return {\r\n                ...state,\r\n                board: [...boardCpy]\r\n            };\r\n        }\r\n        case boardTypes.SET_CURRENT_PLAYER:\r\n            return {\r\n                ...state,\r\n                currentPlayer: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default boardReducer;","import scoreTypes from \"./score.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    scoreArray: [0, 0, 0, 0]\r\n};\r\n\r\nconst scoreReducer = (state =INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case scoreTypes.SET_SCORE: {\r\n            let scores = [...state.scoreArray];\r\n            scores[0] += 1;\r\n            scores[action.payload] += 1;\r\n            return {\r\n                ...state,\r\n                scoreArray: [...scores]\r\n            };\r\n        }\r\n        case scoreTypes.RESET_SCORE:\r\n            return {\r\n                ...state,\r\n                scoreArray: [0, 0, 0, 0]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default scoreReducer;","import {combineReducers} from \"redux\";\r\n\r\n// Reducers\r\nimport menuReducer from \"./menu/menu.reducer\";\r\nimport boardReducer from \"./board/board.reducer\";\r\nimport scoreReducer from \"./score/score.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    menu: menuReducer,\r\n    board: boardReducer,\r\n    score: scoreReducer\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\r\n\r\n// Middlewares\r\nimport logger from \"redux-logger\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n// Root reducer\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nif (process.env.NODE_ENV === 'development')\r\n    middlewares.push(logger);\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Styles\nimport './index.css';\n\n// Components\nimport App from './containers/app/app.container';\nimport {Provider} from 'react-redux';\n\n// Redux Store\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}